DATA_BLOCK "CPS_send"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
NON_RETAIN
   VAR 
      index_msg : Int;
      msg : Array[0..20] of "UDT_CPSFrame";
   END_VAR


BEGIN

END_DATA_BLOCK

DATA_BLOCK "CPS_rcv"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
NON_RETAIN
   VAR 
      index_msg : Int;
      msg : Array[0..20] of "UDT_CPSFrame";
   END_VAR


BEGIN

END_DATA_BLOCK

FUNCTION "sendCPS" : Void
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_INPUT 
      frame : "UDT_CPSFrame";
   END_VAR


BEGIN
	
	"CPS_send".msg["CPS_send".index_msg].remote_ip := #frame.remote_ip;
	"CPS_send".msg["CPS_send".index_msg].type := #frame.type;
	"CPS_send".msg["CPS_send".index_msg].index := #frame.index;
	"CPS_send".msg["CPS_send".index_msg].data := #frame.data;
	"CPS_send".msg["CPS_send".index_msg].frame_length := #frame.frame_length;
	"CPS_send".index_msg := "CPS_send".index_msg + 1;
	
	
	
END_FUNCTION

FUNCTION_BLOCK "iCPS"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_INPUT 
      port_remote : UInt;
      port_listen : UInt;
   END_VAR

   VAR 
      SENDstate : Int;
      SENDTCON {OriginalPartName := 'T_CON'; LibVersion := '3.0'} : TCON;
      SENDconn {OriginalPartName := 'TCON_Param'; LibVersion := '1.0'} : TCON_Param;
      SENDTUSEND {OriginalPartName := 'T_SEND'; LibVersion := '3.0'} : TUSEND;
      SENDremote_addr {OriginalPartName := 'TADDR_Param'; LibVersion := '1.0'} : TADDR_Param;
   END_VAR
   VAR DB_SPECIFIC
      SENDdata : "UDT_CPSFrame";
      send_data_AT { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} AT SENDdata : Array[0..512] of Byte;
      send_data_byte : Array[0..512] of Byte;
   END_VAR
   VAR 
      RCVTCON {OriginalPartName := 'T_CON'; LibVersion := '3.0'} : TCON;
      RCVTURCV {OriginalPartName := 'T_RCV'; LibVersion := '3.0'} : TURCV;
      RCVconn {OriginalPartName := 'TCON_Param'; LibVersion := '1.0'} : TCON_Param;
      RCVstate : Int;
      RCVdata : "UDT_CPSFrame";
      RCVremote_addr {OriginalPartName := 'TADDR_Param'; LibVersion := '1.0'} : TADDR_Param;
      RCVrcv_len : UInt;
   END_VAR

   VAR_TEMP 
      tmp_count : Int;
   END_VAR

   VAR CONSTANT 
      INIT : Int := 0;
      WORKING : Int := 1;
      LOCALport : UInt := 2204;
   END_VAR


BEGIN
	
	//+++++++++++++++++++++++++++++++++++++++ SEND +++++++++++++++++++++++++++++++++++++
	CASE #SENDstate OF
	    #INIT:
	        #SENDTCON.REQ := TRUE;
	        
	        #SENDconn.LOCAL_TSAP_ID[1] := UINT_TO_BYTE(#LOCALport / 256);
	        #SENDconn.LOCAL_TSAP_ID[2] := UINT_TO_BYTE(#LOCALport MOD 256);
	        
	        IF #SENDTCON.DONE THEN
	            #SENDTCON.REQ := FALSE;
	            #SENDstate := #WORKING;
	        END_IF;
	        IF #SENDTCON.ERROR THEN
	            #SENDTCON.REQ := FALSE;
	        END_IF;
	        
	    #WORKING:
	        IF NOT #SENDTUSEND.BUSY AND ("CPS_send".index_msg > 0) THEN
	            #SENDTUSEND.REQ := TRUE;
	            "CPS_send".index_msg := "CPS_send".index_msg - 1;
	            
	            #SENDremote_addr.REM_IP_ADDR := "CPS_send".msg["CPS_send".index_msg].remote_ip;
	            #SENDremote_addr.REM_PORT_NR := #port_remote;
	            
	            #SENDdata := "CPS_send".msg["CPS_send".index_msg];
	            #send_data_byte := #send_data_AT;
	            
	            (*
	            Strg_TO_Chars(Strg:= #data.type,
	                          pChars:=0,
	                          Cnt=>#IBS_string_to_char_length,
	                          Chars:=#send_data_byte);
	            #IBS_data_convert := #data;
	            *)
	
	        END_IF;
	END_CASE;
	
	IF #SENDTUSEND.DONE THEN
	    #SENDTUSEND.REQ := FALSE;
	END_IF;
	IF #SENDTUSEND.ERROR THEN
	    #SENDTUSEND.REQ := FALSE;
	END_IF;
	
	
	//+++++++++++++++++++++++++++++++++++++++ RCV +++++++++++++++++++++++++++++++++++++
	CASE #RCVstate OF
	    #INIT:
	        #RCVTCON.REQ := TRUE;
	        
	        #RCVconn.ID := 3;
	        #RCVconn.LOCAL_TSAP_ID[1] := UINT_TO_BYTE(#port_listen / 256);
	        #RCVconn.LOCAL_TSAP_ID[2] := UINT_TO_BYTE(#port_listen MOD 256);
	        #RCVconn.ACTIVE_EST := FALSE;
	        
	        IF #RCVTCON.DONE THEN
	            #RCVTCON.REQ := FALSE;
	            #RCVstate := #WORKING;
	        END_IF;
	        IF #RCVTCON.ERROR THEN
	            #RCVTCON.REQ := FALSE;
	        END_IF;
	        
	    #WORKING:
	        IF #RCVTURCV.NDR THEN
	            
	            //empfangene daten in DB udp_msg_rcv einreihen
	            "CPS_rcv".msg["CPS_rcv".index_msg] := #RCVdata;
	            "CPS_rcv".msg["CPS_rcv".index_msg].remote_ip := #RCVremote_addr.REM_IP_ADDR;
	            "CPS_rcv".msg["CPS_rcv".index_msg].frame_length := #RCVrcv_len;
	            (*
	            FOR #tmp_count := 0 TO 3 DO
	                "udp_msg_rcv".msg["udp_msg_rcv".index_msg].type[#tmp_count] := #data_rcv_byte[#tmp_count];
	            END_FOR;
	            
	            "udp_msg_rcv".msg["udp_msg_rcv".index_msg].index := #data_rcv.index;
	                
	            MOVE_BLK(IN:=#data_rcv_byte[6],
	                     COUNT:=20,
	                     OUT=>"udp_msg_rcv".msg["udp_msg_rcv".index_msg].data[0]);
	            *)
	            
	            //### IBS #### -> Empfangenes packet spiegeln und wieder zurück senden
	            #RCVdata.remote_ip := #RCVremote_addr.REM_IP_ADDR;
	            #RCVdata.frame_length := #RCVrcv_len;
	            "sendCPS"(#RCVdata);
	            //### IBS #### 
	            
	            //index in DB erhöhen
	            "CPS_rcv".index_msg := "CPS_rcv".index_msg + 1;
	        END_IF;
	        
	        
	END_CASE;
	
	
	//+++++++++++++++++++++++++++++++++++++++ SEND +++++++++++++++++++++++++++++++++++++
	#SENDTCON(ID := 1, CONNECT := #SENDconn);
	
	#SENDTUSEND(ID := 1,
	            LEN :=  #SENDdata.frame_length,
	            DATA := #send_data_byte,
	            ADDR := #SENDremote_addr);
	
	         
	         
	//+++++++++++++++++++++++++++++++++++++++ RCV +++++++++++++++++++++++++++++++++++++
	#RCVTCON(ID:=3, CONNECT:=#RCVconn);
	
	#RCVTURCV(EN_R:=true,
	            ID:=3,
	            LEN:=0,
	            RCVD_LEN=>#RCVrcv_len,
	            DATA:=#RCVdata,
	            ADDR:=#RCVremote_addr);
	
	
END_FUNCTION_BLOCK

DATA_BLOCK "iCPS_DB"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
NON_RETAIN
"iCPS"

BEGIN

END_DATA_BLOCK

