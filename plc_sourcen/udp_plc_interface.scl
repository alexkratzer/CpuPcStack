DATA_BLOCK "udp_msg_send"
{ S7_Optimized_Access := 'FALSE' }
VERSION : 0.1
NON_RETAIN
   STRUCT 
      index_msg : Int;
      msg : Array[0..20] of "UDT_UDPFrame";
   END_STRUCT;


BEGIN

END_DATA_BLOCK

DATA_BLOCK "udp_msg_rcv"
{ S7_Optimized_Access := 'FALSE' }
VERSION : 0.1
NON_RETAIN
   STRUCT 
      index_msg : Int;
      msg : Array[0..20] of "UDT_UDPFrame";
   END_STRUCT;


BEGIN

END_DATA_BLOCK

FUNCTION "sendUDP" : Void
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_INPUT 
      ip_oct4 : USInt;
      msg : Byte;
   END_VAR


BEGIN
	
	"udp_msg_rcv".msg["udp_msg_rcv".index_msg].remote_ip := #ip_oct4;
	"udp_msg_rcv".msg["udp_msg_rcv".index_msg].data[0] := #msg;
	"udp_msg_rcv".msg["udp_msg_rcv".index_msg].data[1] := 1;
	"udp_msg_rcv".msg["udp_msg_rcv".index_msg].data[2] := 2;
	"udp_msg_rcv".msg["udp_msg_rcv".index_msg].data[3] := 3;
	"udp_msg_rcv".msg["udp_msg_rcv".index_msg].data[4] := 4;
	"udp_msg_rcv".index_msg := "udp_msg_rcv".index_msg + 1;
	
	
	
END_FUNCTION

FUNCTION_BLOCK "udp_receive"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_INPUT 
      port_listen : UInt;
   END_VAR

   VAR 
      TCON_Instance {OriginalPartName := 'T_CON'; LibVersion := '3.0'} : TCON;
      TURCV_Instance {OriginalPartName := 'T_RCV'; LibVersion := '3.0'} : TURCV;
      conn {OriginalPartName := 'TCON_Param'; LibVersion := '1.0'} : TCON_Param;
      state : Int;
      rcv_data : Array[0..519] of Byte;   // udp header 8Byte + 512Byte Payload
      remote_param {OriginalPartName := 'TADDR_Param'; LibVersion := '1.0'} : TADDR_Param;
      IBS_Working_done : Int;
   END_VAR

   VAR CONSTANT 
      INIT : Int := 0;
      WORKING : Int := 1;
   END_VAR


BEGIN
	CASE #state OF
	    #INIT:
	        #TCON_Instance.REQ := TRUE;
	        
	        #conn.ID := 3;
	        #conn.LOCAL_TSAP_ID[1] := UINT_TO_BYTE(#port_listen / 256);
	        #conn.LOCAL_TSAP_ID[2] := UINT_TO_BYTE(#port_listen MOD 256);
	        #conn.ACTIVE_EST := FALSE;
	        
	        IF #TCON_Instance.DONE THEN
	            #TCON_Instance.REQ := FALSE;
	            #state := #WORKING;
	        END_IF;
	        IF #TCON_Instance.ERROR THEN
	            #TCON_Instance.REQ := FALSE;
	        END_IF;
	        
	    #WORKING:
	        IF #TURCV_Instance.NDR THEN
	            
	
	            Chars_TO_Strg(Chars:=#rcv_data, pChars:=0, Cnt:=4,
	                          Strg=>"udp_msg_rcv".msg["udp_msg_rcv".index_msg].type);
	            //"udp_msg_rcv".msg["udp_msg_rcv".index_msg].type := CHAR_TO_STRING(#rcv_data[0]);
	            "udp_msg_rcv".msg["udp_msg_rcv".index_msg].index := #rcv_data[4];
	            "udp_msg_rcv".msg["udp_msg_rcv".index_msg].data[0] := #rcv_data[5];
	            "udp_msg_rcv".msg["udp_msg_rcv".index_msg].data[1] := #rcv_data[6];
	            "udp_msg_rcv".msg["udp_msg_rcv".index_msg].data[2] := #rcv_data[7];
	            "udp_msg_rcv".msg["udp_msg_rcv".index_msg].data[3] := #rcv_data[8];
	            "udp_msg_rcv".msg["udp_msg_rcv".index_msg].data[4] := #rcv_data[9];
	            "udp_msg_rcv".msg["udp_msg_rcv".index_msg].data[5] := #rcv_data[10];
	            
	            "udp_msg_rcv".index_msg := "udp_msg_rcv".index_msg + 1; //index erhöhehn funzt irgendwie nicht....
	            
	            //"sendUDP"(ip_oct4:=23, msg:=22);
	            
	        END_IF;
	            
	        
	END_CASE;
	
	#TCON_Instance(ID:=3,
	               CONNECT:=#conn);
	
	
	#TURCV_Instance(EN_R:=true,
	                ID:=3,
	                LEN:=0,
	                DATA:=#rcv_data,
	                ADDR:=#remote_param);
	
	IF #TURCV_Instance.NDR OR #TURCV_Instance.ERROR THEN
	    #IBS_Working_done := #IBS_Working_done + 1;
	END_IF;
	
END_FUNCTION_BLOCK

FUNCTION_BLOCK "udp_send"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_INPUT 
      port_local : UInt;
      port_remote : UInt;
   END_VAR

   VAR 
      state : Int;
      TCON_Instance {OriginalPartName := 'T_CON'; LibVersion := '3.0'} : TCON;
      conn {OriginalPartName := 'TCON_Param'; LibVersion := '1.0'} : TCON_Param;
      TUSEND_Instance {OriginalPartName := 'T_SEND'; LibVersion := '3.0'} : TUSEND;
      remote_addr {OriginalPartName := 'TADDR_Param'; LibVersion := '1.0'} : TADDR_Param;
      data : "UDT_UDPFrame";
      IBS_ERROR_COUNT : Int;
      IBS_INIT_COUNT : Int;
      IBS_DONE_COUNT : Int;
      IBS_STATUS : Word;
      IBS_CONN_STATUS : Word;
      IBS_CONN_ERROR_COUNT : Int;
      IBS_in_WORKING_count : Int;
      IBS_err_status : Word;
   END_VAR

   VAR CONSTANT 
      INIT : Int := 0;
      WORKING : Int := 1;
   END_VAR


BEGIN
	//sende Baustein
	
	CASE #state OF
	    #INIT:
	        #TCON_Instance.REQ := TRUE;
	        
	        #conn.LOCAL_TSAP_ID[1] := UINT_TO_BYTE(#port_local / 256);
	        #conn.LOCAL_TSAP_ID[2] := UINT_TO_BYTE(#port_local MOD 256);
	        #remote_addr.REM_IP_ADDR[1] := 192;
	        #remote_addr.REM_IP_ADDR[2] := 168;
	        #remote_addr.REM_IP_ADDR[3] := 1;
	        
	        IF #TCON_Instance.DONE THEN
	            #IBS_INIT_COUNT := #IBS_INIT_COUNT + 1;
	            #TCON_Instance.REQ := FALSE;
	            #state := #WORKING;
	        END_IF;
	        IF #TCON_Instance.ERROR THEN
	            #TCON_Instance.REQ := FALSE;
	            #IBS_CONN_ERROR_COUNT := #IBS_CONN_ERROR_COUNT + 1;
	        END_IF;
	        
	    #WORKING:
	        IF NOT #TUSEND_Instance.BUSY AND ("udp_msg_rcv".index_msg > 0) THEN
	            #TUSEND_Instance.REQ := TRUE;
	            "udp_msg_rcv".index_msg := "udp_msg_rcv".index_msg - 1;
	            
	            #remote_addr.REM_IP_ADDR[4] := "udp_msg_rcv".msg["udp_msg_rcv".index_msg].remote_ip;
	            #remote_addr.REM_PORT_NR := #port_remote;
	
	            #data := "udp_msg_send".msg["udp_msg_send".index_msg]; //"udp_msg_rcv".msg["udp_msg_rcv".index_msg].data;
	            #IBS_in_WORKING_count := #IBS_in_WORKING_count + 1;
	        END_IF;
	END_CASE;
	
	
	
	//################## Verbindung aufbauen ####################
	#TCON_Instance(ID:=1,
	               STATUS=>#IBS_CONN_STATUS,
	               CONNECT:=#conn);
	
	
	//################## UDP SENDEN ####################
	#TUSEND_Instance(ID:=1,
	                 LEN:=99,
	                 STATUS=>#IBS_STATUS,
	                 DATA:=#data,
	                 ADDR:=#remote_addr);
	
	//wird zwar durchlaufen aber es scheint trotzdem nix rauszukommen.....
	IF #TUSEND_Instance.DONE THEN
	    #IBS_DONE_COUNT := #IBS_DONE_COUNT + 1;
	    #TUSEND_Instance.REQ := FALSE;
	END_IF;
	IF #TUSEND_Instance.ERROR THEN
	    #IBS_ERROR_COUNT := #IBS_ERROR_COUNT + 1;
	    #TUSEND_Instance.REQ := FALSE;
	    #IBS_err_status := #TUSEND_Instance.STATUS;
	END_IF;
	
END_FUNCTION_BLOCK

DATA_BLOCK "udp_send_DB"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
NON_RETAIN
"udp_send"

BEGIN

END_DATA_BLOCK

DATA_BLOCK "udp_receive_DB"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
NON_RETAIN
"udp_receive"

BEGIN

END_DATA_BLOCK

